on:
  push:
  pull_request:
  schedule:
    # New nightlies are usually out ~25 mins after midnight, UTC
    # i.e.: https://static.rust-lang.org/dist/2020-06-06/
    # (we'll do 40 mins to be safe)
    - cron:  '40 0 * * *'

name: full

jobs:
  check:
    name: Check + test

    strategy:
      fail-fast: false
      matrix:
        rust:
          - stable
          - beta
          - nightly
          - 1.43.0
        target:
          - x86_64-unknown-linux-gnu
          - wasm32-unknown-unknown
          - wasm32-wasi
        features:
          - "''"
          - "ext"
          - "tui-backend"
          - "ext,tui-backend"

    continue-on-error: ${{ matrix.rust == 'nightly' }}

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - uses: actions/cache@v2
        with:
          path: |
            ~/.rustup
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.os }}-${{ matrix.rust }}-${{ matrix.target }}-${{ matrix.features }}-cargo
          # Note that we're omitting a hash of Cargo.lock as part of the key because
          # we don't actually commit lockfiles and Cargo can figure out when already
          # built deps in `target` are no longer applicable.
          #
          # The benefit of this is less work when dependencies change (we'll only
          # rebuild the dependencies that changed rather than having to suffer a cache
          # miss and rebuild everything). The downside is that the cache will grow to
          # include more and more cruft until it's manually cleared.
          #
          # To remedy the above, we run `cargo-cache` and `cargo-sweep` during the
          # scheduled daily build.

      # We don't bother using actions-rs/install for this because:
      #  - we want to be able to install cargo-cache with specific features
      #    which actions-rs/install doesn't support
      #  - cache-cache with `--features ci-autoclean` is designed to install
      #    fast anyways
      #  - the cache should pick up the installation of these tools
      #  - this happens infrequently so it doesn't even really matter
      - name: Install cargo-cache and cargo-sweep
        if: github.event_name == 'schedule'
        # The versions here are intentionally pinned.
        # When changing versions, remember to change them below, too.
        run: |
          cargo install cargo-cache \
            --vers =0.4.3 \
            --no-default-features \
            --features ci-autoclean
          cargo install cargo-sweep \
            --vers =0.5.0

      - name: Mark all files for cargo-sweep
        if: github.event_name == 'schedule'
        run: cargo-sweep -s

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: >-
            --target ${{ matrix.target }}
            --all-targets
            --no-default-features
            --features ${{ matrix.features }}

      - name: Run cargo check release
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: >-
            --target ${{ matrix.target }}
            --all-targets
            --no-default-features
            --features ${{ matrix.features }}
            --release

      # Run the non-wasm tests:
      - name: Run cargo test
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: >-
            --target ${{ matrix.target }}
            --no-default-features
            --features ${{ matrix.features }}
            --no-fail-fast

      # Run the non-wasm tests:
      - name: Run cargo test release
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: >-
            --target ${{ matrix.target }}
            --no-default-features
            --features ${{ matrix.features }}
            --no-fail-fast
            --release

      # Run the wasm tests only on 'wasm32-unknown-unknown'
      - name: Install wasm-pack to run wasm tests
        if: matrix.target == 'wasm32-unknown-unknown'
        uses: jetli/wasm-pack-action@v0.3.0
        with:
          version: 'latest'

      # Run the wasm tests only on 'wasm32-unknown-unknown'
      - name: Run cargo test (wasm)
        if: matrix.target == 'wasm32-unknown-unknown'
        run: >-
          wasm-pack
          test
          --node
          --
          --no-default-features
          --features ${{ matrix.features }}
          --no-fail-fast

      # Run the non-wasm tests:
      - name: Run cargo test release (wasm)
        if: matrix.target == 'wasm32-unknown-unknown'
        run: >-
          wasm-pack
          test
          --node
          --release
          --
          --no-default-features
          --features ${{ matrix.features }}
          --no-fail-fast

      - name: Clean up the target folder and cargo's caches
        if: github.event_name == 'schedule'
        # Since we're using the CI version of cargo-cache there aren't any
        # options, which is fine.
        run: |
          cargo-cache
          cargo-sweep -f

      # Note: because we don't install _specific_ nightly versions we don't
      # need to go uninstall older nightly versions; they are replaced when
      # running `rustup install nightly`.
      #
      # Also note that doing any caching for the nightly jobs is probably silly
      # and might actually make those jobs slower.
      # It might make sense to only run nightly jobs on scheduled runs and to
      # not use the cache for them at all, but for now this is fine.
      - name: Clean up old nightly build artifacts
        if: github.event_name == 'schedule' && matrix.rust == 'nightly'
        run: cargo sweep -i

  lint:
    name: Format + run clippy

    strategy:
      fail-fast: false
      matrix:
        rust: [ stable, nightly ]

    continue-on-error: ${{ matrix.rust == 'nightly' }}

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      # Caching is still beneficial for this task since `cargo clippy` basically
      # runs `cargo check` which grabs deps and builds them.
      - uses: actions/cache@v2
        with:
          path: |
            ~/.rustup
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.rust }}-cargo-clippy

      - name: Install cargo-cache and cargo-sweep
        if: github.event_name == 'schedule'
        # The versions here are intentionally pinned.
        run: |
          cargo install cargo-cache \
            --vers =0.4.3 \
            --no-default-features \
            --features ci-autoclean
          cargo install cargo-sweep \
            --vers =0.5.0

      - name: Mark all files for cargo-sweep
        if: github.event_name == 'schedule'
        run: cargo-sweep -s

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy
          target: wasm32-wasi

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      # Update: since we don't run any builds in this task, we shouldn't need to
      # run clean.
      # # Until this gets fixed: https://github.com/rust-lang/rust-clippy/issues/4612
      # # we'll run cargo clean first...
      # - name: Run cargo clean
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: clean

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all --all-features -- -D warnings

      - name: Clean up the target folder and cargo's caches
        if: github.event_name == 'schedule'
        run: |
          cargo-cache
          cargo-sweep -f

      - name: Clean up old nightly build artifacts
        if: github.event_name == 'schedule' && matrix.rust == 'nightly'
        run: cargo sweep -i
